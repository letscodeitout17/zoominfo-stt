name: CI/CD

on:
  push:
    branches: [ main ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        # Use the 'docker-container' driver to enable remote registry caching
        driver: docker-container

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    # The image build already installs Python dependencies. 

    - name: Set up Python for tests
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies for tests (CPU PyTorch)
      run: |
        # Use venv for clean testing environment, if desired
        pip install --upgrade pip
        pip install --no-cache-dir torch torchaudio --index-url https://download.pytorch.org/whl/cpu
        pip install --no-cache-dir -r requirements.txt

    - name: Run tests
      run: |
        # Note: Removed redundant 'source .venv/bin/activate' lines
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        pytest tests

    # This step uses the full ghcr.io tag for pushing and caching
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ghcr.io/${{ github.repository }}:latest
        cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:latest
        cache-to: type=registry,ref=ghcr.io/${{ github.repository }}:latest,mode=max

    - name: Start SSH Agent and Load Key
      uses: webfactory/ssh-agent@v0.9.1
      with:
        ssh-private-key: ${{ secrets.S1ERVER_SSH_KEY }}
        
    - name: Deploy to server via SSH
      run: |
        # Define the variables
        IMAGE_TAG="ghcr.io/${{ github.repository }}:latest"
        CONTAINER_NAME="zoominfo-stt"
        SERVER_USER="ubuntu"
        SERVER_IP="${{ secrets.SERVER_IP }}"

        # Ensure StrictHostKeyChecking is disabled for CI/CD
        SSH_OPTIONS="-o StrictHostKeyChecking=no"

        # The deployment script to execute on the remote server
        DEPLOY_SCRIPT='
          echo "Starting Deployment..."
          docker pull $IMAGE_TAG
          docker stop $CONTAINER_NAME || true
          docker rm $CONTAINER_NAME || true
          docker run -d -p 8000:8000 --name $CONTAINER_NAME $IMAGE_TAG
          echo "Deployment complete."
          '